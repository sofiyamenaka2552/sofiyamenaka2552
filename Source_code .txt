import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.metrics import mean_squared_error

# 1. Load Stock Data
def load_stock_data(ticker='AAPL', period='5y', interval='1d'):
stock = yf.download(ticker, period=period, interval=interval)
return stock['Close']

# 2. Preprocess Data
def preprocess_data(data, sequence_length=60):
scaler = MinMaxScaler()
scaled = scaler.fit_transform(data.values.reshape(-1, 1))

X, y = [], []
for i in range(sequence_length, len(scaled)):
X.append(scaled[i-sequence_length:i, 0])
y.append(scaled[i, 0])

X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1)) # [samples, timesteps, features]
return X, y, scaler

# 3. Split Data
def split_data(X, y, train_ratio=0.8):
train_size = int(len(X) * train_ratio)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]
return X_train, X_test, y_train, y_test

# 4. Build LSTM Model
def build_model(input_shape):
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=input_shape))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(25))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
return model

# 5. Plot Predictions
def plot_predictions(actual, predicted, title='Stock Price Prediction'):
plt.figure(figsize=(14, 5))
plt.plot(actual, color='blue', label='Actual Price')
plt.plot(predicted, color='red', label='Predicted Price')
plt.title(title)
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

# 6. Run Prediction Pipeline
def main():
# Step 1
data = load_stock_data('AAPL', period='5y')
print(f"Loaded data: {len(data)} days")

# Step 2
X, y, scaler = preprocess_data(data)

# Step 3
X_train, X_test, y_train, y_test = split_data(X, y)

# Step 4
model = build_model((X_train.shape[1], 1))
model.fit(X_train, y_train, batch_size=32, epochs=10)

# Step 5
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions.reshape(-1, 1))
y_test_scaled = scaler.inverse_transform(y_test.reshape(-1, 1))

# Step 6
plot_predictions(y_test_scaled, predictions)

# Step 7: Evaluation
rmse = np.sqrt(mean_squared_error(y_test_scaled, predictions))
print(f'RMSE: {rmse:.2f}')

if __name__ == "__main__":
main()